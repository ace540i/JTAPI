/*
 * DirectoryLookupGUI.java
 * 
 * Copyright (c) 2002-2007 Avaya Inc. All rights reserved.
 * 
 * USE OR INSTALLATION OF THIS SAMPLE DEMONSTRATION SOFTWARE INDICATES THE END
 * USERS ACCEPTANCE OF THE GENERAL LICENSE TERMS AVAILABLE ON THE AVAYA WEBSITE
 * AT http://support.avaya.com/LicenseInfo/ (GENERAL LICENSE TERMS). DO NOT USE
 * THE SOFTWARE IF YOU DO NOT WISH TO BE BOUND BY THE GENERAL LICENSE TERMS. IN
 * ADDITION TO THE GENERAL LICENSE TERMS, THE FOLLOWING ADDITIONAL TERMS AND
 * RESTRICTIONS WILL TAKE PRECEDENCE AND APPLY TO THIS DEMONSTRATION SOFTWARE.
 * 
 * THIS DEMONSTRATION SOFTWARE IS PROVIDED FOR THE SOLE PURPOSE OF DEMONSTRATING
 * HOW TO USE THE SOFTWARE DEVELOPMENT KIT AND MAY NOT BE USED IN A LIVE OR
 * PRODUCTION ENVIRONMENT. THIS DEMONSTRATION SOFTWARE IS PROVIDED ON AN AS IS
 * BASIS, WITHOUT ANY WARRANTIES OR REPRESENTATIONS EXPRESS, IMPLIED, OR
 * STATUTORY, INCLUDING WITHOUT LIMITATION, WARRANTIES OF QUALITY, PERFORMANCE,
 * INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * EXCEPT FOR PERSONAL INJURY CLAIMS, WILLFUL MISCONDUCT AND END USERS VIOLATION
 * OF AVAYA OR ITS SUPPLIERS INTELLECTUAL PROPERTY RIGHTS, INCLUDING THROUGH A
 * BREACH OF THE SOFTWARE LICENSE, NEITHER AVAYA, ITS SUPPLIERS NOR END USER
 * SHALL BE LIABLE FOR (i) ANY INCIDENTAL, SPECIAL, STATUTORY, INDIRECT OR
 * CONSEQUENTIAL DAMAGES, OR FOR ANY LOSS OF PROFITS, REVENUE, OR DATA, TOLL
 * FRAUD, OR COST OF COVER AND (ii) DIRECT DAMAGES ARISING UNDER THIS AGREEMENT
 * IN EXCESS OF FIFTY DOLLARS (U.S. $50.00).
 * 
 * To the extent there is a conflict between the General License Terms, your
 * Customer Sales Agreement and the terms and restrictions set forth herein, the
 * terms and restrictions set forth herein shall prevail solely for this Utility
 * Demonstration Software.
 */

//*****************************************************************************
//* Package
//*****************************************************************************

package click2call.ui;

//*****************************************************************************
//* Imports
//*****************************************************************************

// Java swing and awt related classes.

import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Container;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import javax.swing.ScrollPaneConstants;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import click2call.TableConstants;

// Java utilities
import java.util.ArrayList;

// Other classes from the same package implemented in this class.

//*****************************************************************************
//* DirectoryLookupGUI
//*****************************************************************************

/**
 * This class creates and manages dirctory lookup GUI of Click2Call
 * application.
 *  
 */
@SuppressWarnings("serial")
public class DirectoryLookupGUI extends JFrame implements TableConstants
{
    private JTable table;
    private DefaultTableModel tableModel;
    private static final Color BUTTON_BKGD_COLOR = new Color(80, 90, 170);
    private JTextField jt; // Text field to display and receive number to dial.

    /**
     * This is the constructor to get action listener which will listen to
     * events generated by this GUI.
     */
    public DirectoryLookupGUI(ActionListener actionListener)
    {
        super("Directory Lookup");
        setVisible(false);
        // obtain the ContentPane and set BorderLayout.
        Container contentpane = getContentPane();
        contentpane.setLayout(new BorderLayout());

        // Set table header and data.
        String[] tableHeader = { "Name", "Phone Number", "Email" };

        table = new JTable();

        // set table model, foreground, background, font etc.
        table.getTableHeader().setBackground(Color.WHITE);
        table.getTableHeader().setFont(
            new Font(
                table.getTableHeader().getFont().getName(),
                Font.BOLD,
                10));
        table.setGridColor(BUTTON_BKGD_COLOR);

        // set the table model and disable header reordering.
        tableModel = new DefaultTableModel(tableHeader, 0);
        table.getTableHeader().setReorderingAllowed(false);        
        table.setModel(tableModel);
        
        // create scroll pane, add table to it.
        int v = ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;
        int h = ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED;

        JScrollPane jsp = new JScrollPane(table, v, h);

        jsp.getViewport().setBackground(Color.WHITE);

        // Create a panel and add various buttons to it. Actions generated
        // by these buttons are sent to actionListener.
        JPanel jp1 = new JPanel();
        jp1.setLayout(new FlowLayout());
        jp1.setBackground(Color.white);

        JButton jb = new JButton("Call");
        jb.setActionCommand("DIRcall");
        jb.addActionListener(actionListener);
        jb.setBackground(BUTTON_BKGD_COLOR);
        jb.setForeground(Color.WHITE);
        jp1.add(jb);

        jb = new JButton("Delete");
        jb.setActionCommand("DIRdelete");
        jb.addActionListener(actionListener);
        jb.setBackground(BUTTON_BKGD_COLOR);
        jb.setForeground(Color.WHITE);
        jp1.add(jb);

        jb = new JButton("Delete All");
        jb.setActionCommand("DIRdeleteall");
        jb.addActionListener(actionListener);
        jb.setBackground(BUTTON_BKGD_COLOR);
        jb.setForeground(Color.WHITE);
        jp1.add(jb);

        JPanel jp2 = new JPanel();
        JLabel jl =
            new JLabel(
                "Please enter first name OR last name"
                    + " of the person to look for and click \"Lookup\"",
                JLabel.CENTER);
        jl.setForeground(BUTTON_BKGD_COLOR);
        jl.setFont(new Font(jl.getFont().getName(), Font.BOLD, 12));

        jp2.setLayout(new GridLayout(2, 1));
        jp2.setBackground(Color.white);
        jp2.add(jl);

        jt = new JTextField(17);
        jb = new JButton("Lookup");
        jb.setActionCommand("lookup");
        jb.addActionListener(actionListener);
        jb.setBackground(BUTTON_BKGD_COLOR);
        jb.setForeground(Color.WHITE);

        JPanel jp3 = new JPanel();
        jp3.setLayout(new FlowLayout());
        jp3.setBackground(Color.white);
        jp3.add(jt);
        jp3.add(jb);

        jp2.add(jp3);

        // add various panels and scroll pane to content pane.
        contentpane.add(jp2, BorderLayout.NORTH);
        contentpane.add(jsp, BorderLayout.CENTER);
        contentpane.add(jp1, BorderLayout.SOUTH);

        // set size of content pane and display it.
        setSize(600, 300);     

        JFrame.setDefaultLookAndFeelDecorated(true);
    }

    /**
     * Deletes a single row. Take different actions depending upon whether a
     * row is selected to be deleted or not.
     */
    public void delete()
    {
        int selectedRowIndex = table.getSelectedRow();

        // if no row is selected, selectedRowIndex would be -1
        if (selectedRowIndex == -1)
        {
            JOptionPane.showMessageDialog(
                null,
                "Please select a table row to delete.",
                "Delete Error",
                JOptionPane.ERROR_MESSAGE);            
        }
        else
        {
            int rowCount = table.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--)
            {
                if (table.isRowSelected(i))
                {
                    tableModel.removeRow(i);
                }
            }
        }
    }

    /**
     * Deletes all rows of table, i.e., deletes all search results.
     */
    public void deleteAll()
    {
        int rowCount = table.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--)
        {
            tableModel.removeRow(i);
        }
    }

    /**
     * General purpose method used to display message on GUI in appropriate
     * JOptionPane type.
     * 
     * @param msgType - Error or message
     * @param msg - message
     */
    public void displayMessage(int msgType, String msg)
    {
        if (msg != null)
        {
            switch (msgType)
            {
                case JOptionPane.ERROR_MESSAGE :
                    {
                        JOptionPane.showMessageDialog(
                            null,
                            msg,
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                default :
                    {
                        JOptionPane.showMessageDialog(
                            null,
                            msg,
                            "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    }
            }
        }
    }

    /**
     * Method used to display data in table.
     * 
     * @param data - ArrayList containing name &/or number &/or mail id of 
     * single or multiple persons.
     */
    public void displayData(ArrayList<?> data)
    {

        for (int i = 0; i < data.size(); i++)
        {
            tableModel.insertRow(0, (String[]) data.get(i));
        }

    }

    /**
     * Takes the user input from text area representing the first or last name
     * to perform directory search on.
     * 
     * @return name - String
     */
    public String getNameToLookup()
    {
        if (jt.getText() == null)
        {
            return null;
        }
        
        return jt.getText().trim();
    }

    /**
     * Propmts the user to modify (if required) the number to dial and returns
     * that number.
     * 
     * @return number to dial - String
     */
    public String[] getNameAndNumberToDial()
    {
        String numberToDial = null;

        // nameAndNumber would carry name and number of callee as first and
        // second String respectively.
        String[] nameAndNumber = new String[2];

        int selectedRowIndex = table.getSelectedRow();

        // if no row is selected, selectedRowIndex would be -1
        if (selectedRowIndex == -1)
        {
            displayMessage(
                JOptionPane.ERROR_MESSAGE,
                "Please select a table row " + "before attempting a call.");
            return null;
        }

        try
        {
            String selectedNumber = null;
            String nameOfCallee = null;

            try
            {
                selectedNumber =
                    (String) table.getValueAt(
                        selectedRowIndex,
                        DirTableConstants.NUMBER_COLUMN_INDEX);
            }
            catch (Exception e)
            { // Exception here just denotes that no number is available in the
                // table
            }

            try
            {
                nameOfCallee =
                    ((String) table
                        .getValueAt(
                            selectedRowIndex,
                            DirTableConstants.NAME_COLUMN_INDEX))
                        .trim();
            }
            catch (Exception e)
            { // Exception here just denotes that no name is available in the
                // table
            }

            // Ask the user if the number needs to be modified before
            // attempting
            // to make the call (for example, if an access code is required).
            numberToDial =
                (String) JOptionPane.showInputDialog(
                    "If you need to modify the number to \n"
                        + "be dialed, please do so now. (You may \n"
                        + "leave the leading + and whitespaces.)",
                    selectedNumber);

            nameAndNumber[0] = nameOfCallee;
            nameAndNumber[1] = numberToDial;
        }
        catch (HeadlessException hle)
        {
            System.out.println(
                "An exception occured while obtaining number to dial.");
            hle.printStackTrace();
            return null;
        }
        return nameAndNumber;
    }
}
